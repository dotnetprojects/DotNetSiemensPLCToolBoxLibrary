<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AvalonDock</name>
    </assembly>
    <members>
        <member name="T:AvalonDock.DockablePane">
            <summary>
            Defines a pane that can contain contents of type <see cref="T:AvalonDock.DockableContent"/>
            </summary>
            <remarks>Usually a <see cref="T:AvalonDock.DockablePane"/> is used to arrange a series of <see cref="T:AvalonDock.DockableContent"/> in TabControl like model.
            A DockablePane can be redocked to a border of the parent <see cref="T:AvalonDock.DockingManager"/>, can be floated in an external window and can be autohidden.
            When docked into a docking manager the <see cref="P:AvalonDock.DockablePane.Anchor"/> property gives the border to which it's docked.
            See <see cref="T:AvalonDock.DockablePaneCommands"/> to get commands that are supported by DockablePane objects.</remarks>
            <seealso cref="T:AvalonDock.DockableContent"/>
            <seealso cref="T:AvalonDock.DockingManager"/>
        </member>
        <member name="T:AvalonDock.IDropSurface">
            <summary>
            Defines an interface that must be implemented by objects that can host dragged panes
            </summary>
        </member>
        <member name="M:AvalonDock.IDropSurface.OnDragEnter(System.Windows.Point)">
            <summary>
            Called by <see cref="!:DragPaneService"/> when user dragged pane enter this surface
            </summary>
            <param name="point">Location of the mouse</param>
        </member>
        <member name="M:AvalonDock.IDropSurface.OnDragOver(System.Windows.Point)">
            <summary>
            Called by <see cref="!:DragPaneService"/> when user dragged pane is over this surface
            </summary>
            <param name="point">Location of the mouse</param>
        </member>
        <member name="M:AvalonDock.IDropSurface.OnDragLeave(System.Windows.Point)">
            <summary>
            Called by <see cref="!:DragPaneService"/> when user dragged pane leave this surface
            </summary>
            <param name="point">Location of the mouse</param>
        </member>
        <member name="M:AvalonDock.IDropSurface.OnDrop(System.Windows.Point)">
            <summary>
            Called by <see cref="!:DragPaneService"/> when user drops a pane to this surface
            </summary>
            <param name="point">Location of the mouse</param>
        </member>
        <member name="P:AvalonDock.IDropSurface.IsSurfaceVisible">
            <summary>
            Gets a value indicating if this area is avilable for drop a dockable pane
            </summary>
        </member>
        <member name="P:AvalonDock.IDropSurface.SurfaceRectangle">
            <summary>
            Gets the sensible area for drop a pane
            </summary>
        </member>
        <member name="F:AvalonDock.Pane.ContainsActiveContentPropertyKey">
            <summary>
            ContainsActiveContent Read-Only Dependency Property
            </summary>
            <remarks>This property is specially intended for use in restyling.</remarks>
        </member>
        <member name="M:AvalonDock.Pane.SetContainsActiveContent(System.Boolean)">
            <summary>
            Provides a secure method for setting the ContainsActiveContent property.  
            This dependency property indicates if this <see cref="T:AvalonDock.Pane"/> contains a <see cref="T:AvalonDock.ManagedContent"/> set as active content into the parent <see cref="T:AvalonDock.DockingManager"/> object.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:AvalonDock.Pane.OnContainsActiveContentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ContainsActiveContent property.
            </summary>
        </member>
        <member name="M:AvalonDock.Pane.OnContainsActiveContentChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides derived classes an opportunity to handle changes to the ContainsActiveContent property.
            </summary>
        </member>
        <member name="M:AvalonDock.Pane.Dock">
            <summary>
            Dock contained contents to the container <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="M:AvalonDock.Pane.FocusContent">
            <summary>
            Move focus to pane content and activate it
            </summary>
        </member>
        <member name="M:AvalonDock.Pane.OpenOptionsMenu(System.Windows.UIElement)">
            <summary>
            Open the option context menu
            </summary>
            <param name="menuTarget">Target element under which context menu will be shown. Pass null if context menu
            should be shown at mouse position.</param>
            <returns>True if context menu resource was found and open, false otherwise.</returns>
        </member>
        <member name="M:AvalonDock.Pane.CloseOptionsMenu">
            <summary>
            Close the options context menu
            </summary>
        </member>
        <member name="P:AvalonDock.Pane.ContainsActiveContent">
            <summary>
            Gets the ContainsActiveContent property.  This dependency property 
            indicates if this <see cref="T:AvalonDock.Pane"/> contains a <see cref="T:AvalonDock.ManagedContent"/> set as active content into the parent <see cref="T:AvalonDock.DockingManager"/> object. 
            </summary>
        </member>
        <member name="P:AvalonDock.Pane.ShowHeader">
            <summary>
            Gest or set a value indicating if pane should show the tab header
            </summary>
        </member>
        <member name="P:AvalonDock.Pane.IsOptionsMenuOpen">
            <summary>
            Gets a value indicating if the options context menu is open
            </summary>
        </member>
        <member name="F:AvalonDock.DockablePane.ID">
            <summary>
            This guid is saved with the dockable content so that can be restored in the case is 
            referenced by a dockable content
            </summary>
        </member>
        <member name="F:AvalonDock.DockablePane.CanAutohidePropertyKey">
            <summary>
            CanAutohide Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DockablePane.SetCanAutohide(System.Boolean)">
            <summary>
            Provides a secure method for setting the CanAutohide property.  
            This dependency property indicates if contents inside pane can be autohidden.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:AvalonDock.DockablePane.CanExecuteCommand(System.Windows.Input.ICommand)">
            <summary>
            Retrive a value indicating if the command can be executed based to the dockable content state
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.DockablePane.ToggleAutoHide">
            <summary>
            Toggle auto hide state to all content inside the pane
            </summary>
        </member>
        <member name="M:AvalonDock.DockablePane.Close">
            <summary>
            Close pane and all contained contents
            </summary>
            <returns>True if all content has been closed, false if at least one content couldn't be closed.</returns>
            <remarks></remarks>
        </member>
        <member name="M:AvalonDock.DockablePane.Hide">
            <summary>
            Close pane and hide all contained contents
            </summary>
            <returns>True if all content has been hidden, false if at least one content couldn't be hidden.</returns>
            <remarks></remarks>
        </member>
        <member name="M:AvalonDock.DockablePane.CloseOrHideCurrentContent">
            <summary>
            Closes or hides current content depending on HideOnClose property
            </summary>
        </member>
        <member name="P:AvalonDock.DockablePane.CanAutohide">
            <summary>
            Gets the CanAutohide property.  This dependency property 
            indicates if contents inside pane can be autohidden.
            </summary>
        </member>
        <member name="T:AvalonDock.DocumentContent">
            <summary>
            Represent a document which can be host by a <see cref="T:AvalonDock.DocumentPane"/>.
            </summary>
            <remarks>A document is always hosted by a <see cref="T:AvalonDock.DocumentPane"/> usually in the central area of <see cref="T:AvalonDock.DockingManager"/>.
            It has limited dragging features becaus it can be only moved to an other <see cref="T:AvalonDock.DocumentPane"/> and can't float as a separate window.
            You can access all documents within <see cref="T:AvalonDock.DockingManager"/> with property <see cref="P:AvalonDock.DockingManager.Documents"/>.</remarks>
        </member>
        <member name="F:AvalonDock.ManagedContent.IconProperty">
            <summary>
            Select an icon object for the content
            </summary>
        </member>
        <member name="F:AvalonDock.ManagedContent.DefaultFocusedElementProperty">
            <summary>
            Gets or sets an element which is focused by default when content is activated
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.DetachFromContainerPane">
            <summary>
            Remove this content from its parent container pane
            </summary>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.ManagedContent.OnManagerChanged(AvalonDock.DockingManager,AvalonDock.DockingManager)">
            <summary>
            Provides derived classes an opportunity to handle changes to the Manager property.
            </summary>
        </member>
        <member name="F:AvalonDock.ManagedContent.IsActiveContentPropertyKey">
            <summary>
            IsActiveContent Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.SetIsActiveContent(System.Boolean)">
            <summary>
            Provides a secure method for setting the IsActiveContent property.  
            This dependency property indicates the current content is the active content between all docking manager contents
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:AvalonDock.ManagedContent.OnIsActiveContentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the IsActiveContent property.
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.OnIsActiveContentChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides derived classes an opportunity to handle changes to the IsActiveContent property.
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.FocusContent">
            <summary>
            Provides derived classes an opportunity to manage custom focus strategy.
            </summary>
            <remarks>
            Derived classes should not call base class if don't want AvalonDock to set focus on <see cref="P:AvalonDock.ManagedContent.DefaultElement"/> object
            </remarks>
        </member>
        <member name="F:AvalonDock.ManagedContent.IsActiveDocumentPropertyKey">
            <summary>
            IsActiveDocument Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.SetIsActiveDocument(System.Boolean)">
            <summary>
            Provides a secure method for setting the IsActiveDocument property.  
            This dependency property indicates is content is the active document.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:AvalonDock.ManagedContent.OnIsActiveDocumentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the IsActiveDocument property.
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.OnIsActiveDocumentChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides derived classes an opportunity to handle changes to the IsActiveDocument property.
            </summary>
        </member>
        <member name="F:AvalonDock.ManagedContent.IsLockedProperty">
            <summary>
            IsLocked Dependency Property
            </summary>
        </member>
        <member name="F:AvalonDock.ManagedContent.FloatingWindowSizeProperty">
            <summary>
            FloatingWindowSize Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.OnFloatingWindowSizeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the FloatingWindowSize property.
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.OnFloatingWindowSizeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides derived classes an opportunity to handle changes to the FloatingWindowSize property.
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.CanExecuteCommand(System.Windows.Input.ICommand)">
            <summary>
            Retrive a value indicating if the command passed can be executed based to the content state
            </summary>
            <param name="command">Command to execute</param>
            <returns>True if the command can be execute, false otherwise.</returns>
        </member>
        <member name="M:AvalonDock.ManagedContent.Show">
            <summary>
            Shows the content
            </summary>
            <remarks>How content is shows depends from the type of the content.</remarks>
        </member>
        <member name="M:AvalonDock.ManagedContent.Show(AvalonDock.DockingManager)">
            <summary>
            Shows the content inside a <see cref="T:AvalonDock.DockingManager"/> object
            </summary>
            <remarks>How content is shows depends from the type of the content.</remarks>
        </member>
        <member name="M:AvalonDock.ManagedContent.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Ovveride this method to handle <see cref="!:DocumentContent.OnClosing"/> event.
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.OnClosed">
            <summary>
            Ovveride this method to handle <see cref="!:DocumentContent.OnClose"/> event.
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.Close">
            <summary>
            Close the content
            </summary>
            <returns>Returns true if the content was succesfully closed, false otherwise.</returns>
        </member>
        <member name="M:AvalonDock.ManagedContent.Hide">
            <summary>
            Hide the content
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.Activate">
            <summary>
            Set the content as the active content
            </summary>
            <remarks>After this method returns property <see cref="P:AvalonDock.ManagedContent.IsActiveContent"/> returns true.</remarks>
        </member>
        <member name="M:AvalonDock.ManagedContent.SaveLayout(System.Xml.XmlWriter)">
            <summary>
            Save content specific layout settings
            </summary>
            <param name="storeWriter">Backend store writer</param>
            <remarks>Custom derived class can overloads this method to handle custom layout persistence.</remarks>
        </member>
        <member name="M:AvalonDock.ManagedContent.RestoreLayout(System.Xml.XmlElement)">
            <summary>
            Restore content specific layout settings
            </summary>
            <param name="storeReader">Saved xml element containg content layout settings</param>
            <remarks>Custom derived class must overload this method to restore custom layout settings previously saved trought <see cref="M:AvalonDock.ManagedContent.SaveLayout(System.Xml.XmlWriter)"/>.</remarks>
        </member>
        <member name="P:AvalonDock.ManagedContent.Title">
            <summary>
            Gets or set the title of the content
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContent.Icon">
            <summary>
            Access to <see cref="F:AvalonDock.ManagedContent.IconProperty"/> dependency property
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContent.DefaultElement">
            <summary>
            Access to <see cref="F:AvalonDock.ManagedContent.DefaultFocusedElementProperty"/>
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContent.DragEnabledArea">
            <summary>
            Gets the draggable area of the document
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContent.ContainerPane">
            <summary>
            Gets container pane currently hosting the content
            </summary>
            <remarks>Please note that this value could change as user move the content around the <see cref="T:AvalonDock.DockingManager"/>.</remarks>
        </member>
        <member name="P:AvalonDock.ManagedContent.Manager">
            <summary>
            Get current hosting docking manager (<see cref="T:AvalonDock.DockingManager"/>)
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContent.IsActiveContent">
            <summary>
            Gets the IsActiveContent property.  This dependency property 
            indicates the active (selected) content between all contents of the docking manager
            </summary>
        </member>
        <member name="E:AvalonDock.ManagedContent.IsActiveContentChanged">
            <summary>
            Event fired when the <see cref="P:AvalonDock.ManagedContent.IsActiveContent"/> property changes
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContent.IsActiveDocument">
            <summary>
            Gets the IsActiveDocument property.  This dependency property 
            indicates is content is the active document.
            </summary>
        </member>
        <member name="E:AvalonDock.ManagedContent.IsActiveDocumentChanged">
            <summary>
            Event fired when the <see cref="P:AvalonDock.ManagedContent.IsActiveContent"/> property changes
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContent.IsLocked">
            <summary>
            Gets or sets the IsLocked property.  This dependency property 
            indicates if this content is locked (for <see cref="T:AvalonDock.DocumentContent"/> objects this often means that it's readonly).
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContent.FloatingWindowSize">
            <summary>
            Gets or sets the FloatingWindowSize property.  This dependency property 
            indicates the size of the floating window hosting the content when it's floating.
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContent.IsCloseable">
            <summary>
            Get or set a value indicating if this content can be closed or hidden
            </summary>
        </member>
        <member name="E:AvalonDock.ManagedContent.Closing">
            <summary>
            Event fired when the content is about to be closed
            </summary>
        </member>
        <member name="E:AvalonDock.ManagedContent.Closed">
            <summary>
            Event fired when the content has been closed
            </summary>
            <remarks>Note that when a document is closed property like <see cref="P:AvalonDock.ManagedContent.ContainerPane"/> or <see cref="P:AvalonDock.ManagedContent.Manager"/> returns null.</remarks>
        </member>
        <member name="F:AvalonDock.DocumentContent.InfoTipProperty">
            <summary>
            InfoTip Dependency Property
            </summary>
        </member>
        <member name="F:AvalonDock.DocumentContent.ContentTypeDescriptionProperty">
            <summary>
            ContentTypeDescription Dependency Property
            </summary>
        </member>
        <member name="F:AvalonDock.DocumentContent.IsFloatingPropertyKey">
            <summary>
            IsFloating Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DocumentContent.SetIsFloating(System.Boolean)">
            <summary>
            Provides a secure method for setting the IsFloating property.  
            This dependency property indicates if the DocumentContent is floating inside an external window.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:AvalonDock.DocumentContent.Show">
            <summary>
            Show <see cref="T:AvalonDock.DocumentContent"/> as tabbed document
            </summary>
        </member>
        <member name="M:AvalonDock.DocumentContent.Show(AvalonDock.DockingManager)">
            <summary>
            Show <see cref="T:AvalonDock.DocumentContent"/> as tabbed document inside the provided <see cref="T:AvalonDock.DockingManager"/>
            </summary>
            <param name="manager">Docking manager target</param>
        </member>
        <member name="M:AvalonDock.DocumentContent.Show(System.Boolean)">
            <summary>
            Show <see cref="T:AvalonDock.DocumentContent"/> as tabbed document or inside a floating window
            </summary>
        </member>
        <member name="M:AvalonDock.DocumentContent.Show(AvalonDock.DockingManager,System.Boolean)">
            <summary>
            Show <see cref="T:AvalonDock.DocumentContent"/> as tabbed document inside the provided <see cref="T:AvalonDock.DockingManager"/>
            </summary>
            <param name="manager">Docking manager target</param>
            <param name="showAsFloatingWindow">True if document should be shown inside a floating window (<see cref="T:AvalonDock.DocumentFloatingWindow"/>)</param>
        </member>
        <member name="M:AvalonDock.DocumentContent.Activate">
            <summary>
            Activate the document showing its header if it's not visible
            </summary>
        </member>
        <member name="M:AvalonDock.DocumentContent.CanExecuteCommand(System.Windows.Input.ICommand)">
            <summary>
            Retrive a value indicating if the command can be executed based to the dockable content state
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.DocumentContent.InternalClose">
            <summary>
            Close this content without notifications
            </summary>
        </member>
        <member name="M:AvalonDock.DocumentContent.Close">
            <summary>
            Close this document removing it from its parent container
            </summary>
            <remarks>Use this function to close a document and remove it from its parent container. Please note
            that if you simply remove it from its parent <see cref="T:AvalonDock.DocumentPane"/> without call this method, events like
            <see cref="!:OnClosing"/>/<see cref="!:OnClosed"/> are not called.
            </remarks>
        </member>
        <member name="M:AvalonDock.DocumentContent.Hide">
            <summary>
            Hide the <see cref="T:AvalonDock.DocumentContent"/> (Close the document)
            </summary>
            <returns></returns>
        </member>
        <member name="P:AvalonDock.DocumentContent.InfoTip">
            <summary>
            Gets or sets the InfoTip property.  This dependency property 
            indicates information text attached to the document content.
            </summary>
            <remarks>This text is usually displayed when users switch between documents and helps them to choose the right one.</remarks>
        </member>
        <member name="P:AvalonDock.DocumentContent.ContentTypeDescription">
            <summary>
            Gets or sets the ContentTypeDescription property.  This dependency property 
            indicates a text which describes the type of content contained in this document.
            </summary>
        </member>
        <member name="P:AvalonDock.DocumentContent.IsFloatingAllowed">
            <summary>
            Gets or sets a value indicating if this document can float over main window (VS2010 Feature).
            </summary>
        </member>
        <member name="P:AvalonDock.DocumentContent.IsFloating">
            <summary>
            Gets the IsFloating property.  This dependency property 
            indicates if the DocumentContent is floating inside an external window.
            </summary>
        </member>
        <member name="P:AvalonDock.DeserializationCallbackEventArgs.Name">
            <summary>
            Gets the name of the content to deserialize
            </summary>
        </member>
        <member name="P:AvalonDock.DeserializationCallbackEventArgs.Content">
            <summary>
            Gets/Sets the content manually deserialized
            </summary>
        </member>
        <member name="T:AvalonDock.ThemeFactory">
            <summary>
            Is used for color-support to change the colors depending on a base theme.
            </summary>
        </member>
        <member name="M:AvalonDock.ThemeFactory.ChangeTheme(System.String)">
            <summary>
            Change the theme to one from AvalonDock.
            </summary>
            <param name="theme">for example: "aero.normalcolor" (default style)</param>
        </member>
        <member name="M:AvalonDock.ThemeFactory.ChangeTheme(System.Uri)">
            <summary>
            Change the theme to one from AvalonDock.
            </summary>
            <param name="theme">for example: /AvalonDock;component/themes/aero.normalcolor.xaml" (default style)</param>
        </member>
        <member name="M:AvalonDock.ThemeFactory.ChangeColors(System.Windows.Media.Color)">
            <summary>
            Change the colors based on the aero-theme from AvalonDock.
            <para>
            <example>Example: ChangeColors(Colors.DarkGreen)</example>
            </para>
            </summary>
            <param name="color">the new Color</param>
        </member>
        <member name="M:AvalonDock.ThemeFactory.ChangeColors(System.String,System.Windows.Media.Color)">
            <summary>
            Change the colors based on a theme-name from AvalonDock.
            <para>
            <example>Example: ChangeColors("classic", Colors.DarkGreen)</example>
            </para>
            </summary>
            <param name="baseTheme">the string of the base theme we want to change</param>
            <param name="color">the new Color</param>
        </member>
        <member name="M:AvalonDock.ThemeFactory.ResetTheme">
            <summary>
            Reset custom colors to theme defaults
            </summary>
        </member>
        <member name="M:AvalonDock.ThemeFactory.ChangeBrush(AvalonDock.AvalonDockBrushes,System.Windows.Media.Brush)">
            <summary>
            Change a specified brush inside the actual theme.
            Look at AvalonDockBrushes.cs for possible values.
            </summary>
            <param name="brushName">an AvalonDockBrushes value</param>
            <param name="brush">The new brush. It can be every brush type that is derived from Brush-class.</param>
        </member>
        <member name="M:AvalonDock.ThemeFactory.ChangeBrush(System.String,System.Windows.Media.Brush)">
            <summary>
            Change a specified brush inside the actual theme.
            </summary>
            <param name="brushName">a brush name</param>
            <param name="brush">The new brush. It can be every brush type that is derived from Brush-class.</param>
        </member>
        <member name="M:AvalonDock.ThemeFactory.ChangeKeysInResourceDictionary(System.Windows.ResourceDictionary,System.Windows.Media.Color)">
            <summary>
            Searches for keys in the ResourceDictionary for brushes and changes the color-values
            </summary>
            <param name="rd">the ResourceDictionary</param>
            <param name="color">the new Color</param>
        </member>
        <member name="T:AvalonDock.AvalonDockBrushes">
            <summary>
            Defines a list of brushes used by AvalonDock templates
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DefaultBackgroundBrush">
            <summary>
            Default brush for DockingManager background
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DockablePaneTitleBackground">
            <summary>
            Brush used for the title background of a <see cref="T:AvalonDock.DockablePane"/>.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DockablePaneTitleBackgroundSelected">
            <summary>
            Brush used for the title background of a <see cref="T:AvalonDock.DockablePane"/> when is focused.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DockablePaneTitleForeground">
            <summary>
            Brush used for the title foreground of a <see cref="T:AvalonDock.DockablePane"/>.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DockablePaneTitleForegroundSelected">
            <summary>
            Brush used for the title foreground of a <see cref="T:AvalonDock.DockablePane"/> when is focused.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.PaneHeaderCommandBackground">
            <summary>
            Brush used for the background of the pane command pins.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.PaneHeaderCommandBorderBrush">
            <summary>
            Brush used for the border of the pane command pins.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBackground">
            <summary>
            Brush used for the background of a document header.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderForeground">
            <summary>
            Brush used for the foreground of a document header.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderForegroundSelected">
            <summary>
            Brush used for fonts while a document header is selected but not activated
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderForegroundSelectedActivated">
            <summary>
            Brush used for fonts while a document header is selected and activated
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBackgroundSelected">
            <summary>
            Brush used for the background of a document header when selected (<see cref="P:AvalonDock.ManagedContent.IsActiveContent"/>).
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBackgroundSelectedActivated">
            <summary>
            Brush used for the background of a document header when active and selected (<see cref="P:AvalonDock.ManagedContent.IsActiveDocument"/>).
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBackgroundMouseOver">
            <summary>
            Brush used for the background of a document header when mouse is over it.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBorderBrushMouseOver">
            <summary>
            Brush used for the border brush of a document header when mouse is over it (but is not selected).
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBorder">
            <summary>
            Brush for the document header border
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBorderSelected">
            <summary>
            Brush for the document header border when contains a document selected
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBorderSelectedActivated">
            <summary>
            Brush for the document header border when contains a document selected and activated
            </summary>
        </member>
        <member name="F:AvalonDock.ResizingPanel.OrientationProperty">
            <summary>
            Give access to Orientation attached property
            </summary>
            <remarks>If horizontal oriented children are positioned from left to right and width of each child is computed according to <see cref="!:ResizingWidth"/> attached property value. When vertical oriented children are arranged from top to bottom, according to <see cref="!:ResizingHeight"/> of each child.</remarks>
        </member>
        <member name="M:AvalonDock.ResizingPanel.CorrectSizes">
            <summary>
            Correct sizes of children if all of them are set to absolutes
            </summary>
        </member>
        <member name="M:AvalonDock.ResizingPanel.AdjustPanelSizes">
            <summary>
            Helper funcs which correct elements size of a resizing panel
            </summary>
        </member>
        <member name="M:AvalonDock.ResizingPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Compute the desidered size of the panel
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.ResizingPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges children giving them a proportional space according to their <see cref="!:SplitSize"/> attached property value
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.ResizingPanel.splitter_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            This method is called by a splitter when it is dragged
            </summary>
            <param name="splitter">Dragged splitter</param>
            <param name="delta"></param>
        </member>
        <member name="M:AvalonDock.ResizingPanel.RemoveChild(System.Windows.FrameworkElement)">
            <summary>
            Remove a child from children collection
            </summary>
            <param name="childToRemove"></param>
        </member>
        <member name="M:AvalonDock.ResizingPanel.InsertChildRelativeTo(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Insert a new child element into the children collection.
            </summary>
            <param name="childToInsert">New child element to insert.</param>
            <param name="relativeChild">Child after or before which <see cref="!:childToInsert"/> element must be insert.</param>
            <param name="next">True if new child must be insert after the <see cref="!:relativeChild"/> element. False otherwise.</param>
        </member>
        <member name="P:AvalonDock.ResizingPanel.Orientation">
            <summary>
            Gets or sets the orientation of the panel
            </summary>
            <remarks>If horizontal oriented children are positioned from left to right and width of each child is computed according to <see cref="!:ResizingWidth"/> attached property value. When vertical oriented children are arranged from top to bottom, according to <see cref="!:ResizingHeight"/> of each child.</remarks>
        </member>
        <member name="T:AvalonDock.FloatingWindow">
            <summary>
            Represents the base class for <see cref="T:AvalonDock.DockableFloatingWindow"/> and <see cref="T:AvalonDock.DocumentFloatingWindow"/> classes
            </summary>
            <remarks>Provides base services for floating windows</remarks>
        </member>
        <member name="F:AvalonDock.FloatingWindow.ContentTitlePropertyKey">
            <summary>
            ContentTitle Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.FloatingWindow.SetContentTitle(System.Object)">
            <summary>
            Provides a secure method for setting the ContentTitle property.  
            This dependency property indicates title of the content currectly hosted in the floating window.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:AvalonDock.FloatingWindow.Close(System.Boolean)">
            <summary>
            Closes the window regardless of result of contents CanClose method call
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:AvalonDock.FloatingWindow.Dock">
            <summary>
            Redock contained <see cref="T:AvalonDock.ManagedContent"/> object to the <see cref="!:DcokingManager"/>
            </summary>
        </member>
        <member name="P:AvalonDock.FloatingWindow.ContentTitle">
            <summary>
            Gets the ContentTitle property.  This dependency property 
            indicates title of the content currectly hosted in the floating window.
            </summary>
        </member>
        <member name="F:AvalonDock.DocumentPane.ContainsActiveDocumentPropertyKey">
            <summary>
            ContainsActiveDocument Read-Only Dependency Property
            </summary>
            <remarks>This property is especially intended for use in restyling.</remarks>
        </member>
        <member name="M:AvalonDock.DocumentPane.SetContainsActiveDocument(System.Boolean)">
            <summary>
            Provides a secure method for setting the ContainsActiveDocument property.  
            This dependency property indicates if this pane contains a <see cref="T:AvalonDock.DocumentPane"/> that has <see cref="P:AvalonDock.ManagedContent.IsActiveDocument"/> property set to true.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:AvalonDock.DocumentPane.OnContainsActiveDocumentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ContainsActiveDocument property.
            </summary>
        </member>
        <member name="M:AvalonDock.DocumentPane.OnContainsActiveDocumentChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides derived classes an opportunity to handle changes to the ContainsActiveDocument property.
            </summary>
        </member>
        <member name="P:AvalonDock.DocumentPane.IsMainDocumentPane">
            <summary>
            Returns a value indicating if this pane is the main document pane
            </summary>
            <remarks>The main document pane is the default pane that remains always visible.</remarks>
        </member>
        <member name="P:AvalonDock.DocumentPane.ContainsActiveDocument">
            <summary>
            Gets the ContainsActiveDocument property.  This dependency property 
            indicates if this pane contains a <see cref="T:AvalonDock.DocumentPane"/> that has <see cref="P:AvalonDock.ManagedContent.IsActiveDocument"/> property set to true.   
            </summary>
        </member>
        <member name="M:AvalonDock.RoutedEventHelper.RaiseEvent(System.Windows.DependencyObject,System.Windows.RoutedEventArgs)">
            <summary>
            A static helper method to raise a routed event on a target UIElement or ContentElement.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="args">RoutedEventArgs to use when raising the event</param>
        </member>
        <member name="M:AvalonDock.RoutedEventHelper.AddHandler(System.Windows.DependencyObject,System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            A static helper method that adds a handler for a routed event 
            to a target UIElement or ContentElement.
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="routedEvent">Event that will be handled</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:AvalonDock.RoutedEventHelper.RemoveHandler(System.Windows.DependencyObject,System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            A static helper method that removes a handler for a routed event 
            from a target UIElement or ContentElement.
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="routedEvent">Event that will no longer be handled</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:AvalonDock.OverlayWindow.OnDragEnter(AvalonDock.OverlayWindowDockingButton,System.Windows.Point)">
            <summary>
            Shows a highlighting rectangle
            </summary>
            <param name="overlayWindowDockingButton"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.OverlayWindow.OnDragLeave(AvalonDock.OverlayWindowDockingButton,System.Windows.Point)">
            <summary>
            Hides the highlighting rectangle
            </summary>
            <param name="overlayWindowDockingButton"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:AvalonDock.OverlayWindow.OverlayButtonHoverPropertyKey">
            <summary>
            OverlayButtonHover Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.OverlayWindow.SetOverlayButtonHover(AvalonDock.OverlayButtonHover)">
            <summary>
            Provides a secure method for setting the OverlayButtonHover property.  
            This dependency property indicates indicates which anchor button is currently highlighted by user.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="P:AvalonDock.OverlayWindow.OverlayButtonHover">
            <summary>
            Gets the OverlayButtonHover property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="F:AvalonDock.PaneTabPanel.TabItemStyleProperty">
            <summary>
            TabItemStyle Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.PaneTabPanel.OnTabItemStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the TabItemStyle property.
            </summary>
        </member>
        <member name="M:AvalonDock.PaneTabPanel.OnTabItemStyleChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides derived classes an opportunity to handle changes to the TabItemStyle property.
            </summary>
        </member>
        <member name="P:AvalonDock.PaneTabPanel.TabItemStyle">
            <summary>
            Gets or sets the TabItemStyle property.  This dependency property 
            indicates style to use for tabs.
            </summary>
        </member>
        <member name="T:AvalonDock.DockablePaneAnchorTab">
            <summary>
            Represents a tab displayed in a border of the docking manager
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:AvalonDock.DockablePaneAnchorTab.OnPaneAttached(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the referencedContent property changes in order to update the Anchor property
            </summary>
            <param name="depObj"></param>
            <param name="e"></param>
        </member>
        <member name="F:AvalonDock.DockablePaneAnchorTab.AnchorPropertyKey">
            <summary>
            Anchor Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DockablePaneAnchorTab.SetAnchor(AvalonDock.AnchorStyle)">
            <summary>
            Provides a secure method for setting the Anchor property.  
            This dependency property indicates the achor style of referenced content that is in autohidden state.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:AvalonDock.DockablePaneAnchorTab.IconPropertyKey">
            <summary>
            Icon Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DockablePaneAnchorTab.SetIcon(System.Object)">
            <summary>
            Provides a secure method for setting the Icon property.  
            This dependency property indicates icon of the referenced content in autohidden state.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:AvalonDock.DockablePaneAnchorTab.TitlePropertyKey">
            <summary>
            Title Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DockablePaneAnchorTab.SetTitle(System.Object)">
            <summary>
            Provides a secure method for setting the Title property.  
            This dependency property indicates title of the content that is hosted in autohidden pane.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:AvalonDock.DockablePaneAnchorTab.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the MouseMove event
            </summary>
            <param name="e"></param>
            <remarks>Notify the docking manager that the referenced content should appears</remarks>
        </member>
        <member name="M:AvalonDock.DockablePaneAnchorTab.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseDown event
            </summary>
            <param name="e"></param>
            <remarks>Notify the docking manager that the referenced content should appears and should be activated</remarks>
        </member>
        <member name="P:AvalonDock.DockablePaneAnchorTab.ReferencedContent">
            <summary>
            Gets or sets the referenced content
            </summary>
        </member>
        <member name="P:AvalonDock.DockablePaneAnchorTab.Anchor">
            <summary>
            Gets the Anchor property.  This dependency property 
            indicates the achor style of referenced content that is in autohidden state.
            </summary>
        </member>
        <member name="P:AvalonDock.DockablePaneAnchorTab.Icon">
            <summary>
            Gets the Icon property.  This dependency property 
            indicates icon of the referenced content in autohidden state.
            </summary>
        </member>
        <member name="P:AvalonDock.DockablePaneAnchorTab.Title">
            <summary>
            Gets the Title property.  This dependency property 
            indicates title of the content that is hosted in autohidden pane.
            </summary>
        </member>
        <member name="T:AvalonDock.NavigatorWindowItem">
            <summary>
            Represent an navigator item within lists of contents that user can choose from the <see cref="T:AvalonDock.NavigatorWindow"/>
            </summary>
        </member>
        <member name="T:AvalonDock.NavigatorWindowDocumentItem">
            <summary>
            Specialized class of <see cref="T:AvalonDock.NavigatorWindowItem"/> for <see cref="T:AvalonDock.DocumentContent"/> objects
            </summary>
        </member>
        <member name="T:AvalonDock.NavigatorWindow">
            <summary>
            Window that is automatically shown when user press Ctrl+Tab combination
            </summary>
            <remarks>This window allow user to rapidly select a <see cref="T:AvalonDock.DockableContent"/> object or a <see cref="T:AvalonDock.DocumentContent"/> object.
            When selected a content is also activate with the function <see cref="M:AvalonDock.ManagedContent.Activate"/></remarks>
        </member>
        <member name="M:AvalonDock.NavigatorWindow.OnSelectedContentChanged(AvalonDock.NavigatorWindowItem,AvalonDock.NavigatorWindowItem)">
            <summary>
            Provides derived classes an opportunity to handle changes to the SelectedContent property.
            </summary>
        </member>
        <member name="F:AvalonDock.NavigatorWindow.DocumentsPropertyKey">
            <summary>
            Documents Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.NavigatorWindow.SetDocuments(System.Windows.Data.CollectionView)">
            <summary>
            Provides a secure method for setting the Documents property.  
            This dependency property indicates documents currently hosted by parent <see cref="T:AvalonDock.DockingManager"/>.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:AvalonDock.NavigatorWindow.DockableContentsPropertyKey">
            <summary>
            DockableContents Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.NavigatorWindow.SetDockableContents(System.Windows.Data.CollectionView)">
            <summary>
            Provides a secure method for setting the DockableContents property.  
            This dependency property indicates dockable contents hosted in parent <see cref="T:AvalonDock.DockingManager"/> object.
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="P:AvalonDock.NavigatorWindow.Documents">
            <summary>
            Gets the Documents property.  This dependency property 
            indicates documents currently hosted by parent <see cref="T:AvalonDock.DockingManager"/>.
            </summary>
        </member>
        <member name="P:AvalonDock.NavigatorWindow.DockableContents">
            <summary>
            Gets the DockableContents property.  This dependency property 
            indicates dockable contents hosted in parent <see cref="T:AvalonDock.DockingManager"/> object.
            </summary>
        </member>
        <member name="T:AvalonDock.DockingManager">
            <summary>
            Represents a control which manages a dockable layout for its children
            </summary>
        </member>
        <member name="F:AvalonDock.DockingManager.layoutFileVersion">
            <summary>
            Layout format version
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.Dispose">
            <summary>
            Call this function if you want to deallocate external floating windows, that otherwise are closed when main window is closed.
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.OnApplyTemplate">
            <summary>
            Overriden to get a reference to underlying template elements
            </summary>
        </member>
        <member name="F:AvalonDock.DockingManager.ActiveDocumentProperty">
            <summary>
            ActiveDocument Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.OnActiveDocumentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ActiveDocument property.
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.OnActiveDocumentChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides derived classes an opportunity to handle changes to the ActiveDocument property.
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.CoerceActiveDocumentValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the ActiveDocument value.
            </summary>
        </member>
        <member name="F:AvalonDock.DockingManager.ActiveContentProperty">
            <summary>
            ActiveContent Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.OnActiveContentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ActiveContent property.
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.OnActiveContentChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides derived classes an opportunity to handle changes to the ActiveContent property.
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.CoerceActiveContentValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the ActiveContent value.
            </summary>
        </member>
        <member name="F:AvalonDock.DockingManager.DockableContentsPropertyKey">
            <summary>
            DockableContents Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:AvalonDock.DockingManager.DocumentsPropertyKey">
            <summary>
            DockableContents Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.GetMainDocumentPane(AvalonDock.ResizingPanel)">
            <summary>
            Returns the main document pane
            </summary>
            <param name="parentPanel"></param>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.DockingManager.EnsureContentNotEmpty">
            <summary>
            This method ensure that content of this <see cref="T:AvalonDock.DockingManager"/> is not empty
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.Anchor(AvalonDock.DockablePane,AvalonDock.AnchorStyle)">
            <summary>
            Anchor a dockable pane to a border
            </summary>
            <param name="paneToAnchor"></param>
            <param name="anchor"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.Anchor(AvalonDock.Pane,AvalonDock.Pane,AvalonDock.AnchorStyle)">
            <summary>
            Anchor a pane (<see cref="T:AvalonDock.DockablePane"/> and <see cref="T:AvalonDock.DocumentPane"/>) to a border of a another pane
            </summary>
            <param name="paneToAnchor">Pane to anchor</param>
            <param name="relativePane">Pane relative</param>
            <param name="anchor">Position relative to the target pane</param>
        </member>
        <member name="M:AvalonDock.DockingManager.Anchor(AvalonDock.DockablePane,AvalonDock.DocumentPane,AvalonDock.AnchorStyle)">
            <summary>
            Anchor a dockable pane (<see cref="T:AvalonDock.DockablePane"/>) to a border of a document pane
            </summary>
            <param name="paneToAnchor">Pane to anchor</param>
            <param name="relativePane">Pane relative</param>
            <param name="anchor"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.Anchor(AvalonDock.DocumentPane,AvalonDock.DocumentPane,AvalonDock.AnchorStyle)">
            <summary>
            Anchor a document pane (<see cref="T:AvalonDock.DocumentPane"/>) to a border of an other document pane
            </summary>
            <param name="paneToAnchor">Pane to anchor</param>
            <param name="relativePane">Pane relative</param>
            <param name="anchor"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.Anchor(AvalonDock.DockablePane,AvalonDock.DockablePane,AvalonDock.AnchorStyle)">
            <summary>
            Anchor a dockable pane (<see cref="T:AvalonDock.DockablePane"/>) to a border of an other dockable pane
            </summary>
            <param name="paneToAnchor">Pane to anchor</param>
            <param name="relativePane">Pane relative</param>
            <param name="anchor"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.RemovePaneFromTabGroups(AvalonDock.DockablePane)">
            <summary>
            Remove a pane from border tab groups
            </summary>
            <param name="pane">Pane to remove</param>
            <returns>True if pane was removed, false otherwise</returns>
        </member>
        <member name="M:AvalonDock.DockingManager.CheckValidPanesFromTabGroups">
            <summary>
            Check if only vali panes are referenced by anchor tabs
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.ToggleAutoHide(AvalonDock.DockablePane)">
            <summary>
            Autohides/redock a dockable pane
            </summary>
            <param name="pane">Pane to auto hide/redock</param>
        </member>
        <member name="M:AvalonDock.DockingManager.Hide(AvalonDock.DockableContent)">
            <summary>
            Hide a dockable content removing it from its container <see cref="T:AvalonDock.Pane"/>
            </summary>
            <param name="content">Content to hide</param>
            <remarks>Note that if you simply remove a content from its container without calling this method, the
            layout serializer component can't managed correctly the removed content.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.Show(AvalonDock.DocumentContent)">
            <summary>
            Show or add a document in AvalonDock
            </summary>
            <param name="document">Document to show/add.</param>
            <remarks>If document provided is not present in the <see cref="P:AvalonDock.DockingManager.Documents"/> list, this method inserts it in first position of <see cref="!:MainDocumentPane.Items"/> collection.
            In both cases select it in the container <see cref="T:AvalonDock.DocumentPane"/>.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.Show(AvalonDock.DocumentContent,System.Boolean)">
            <summary>
            Show or add a document in AvalonDock
            </summary>
            <param name="document">Document to show/add.</param>
            <param name="floating">Indicates if the document should be placed in a floating window</param>
            <remarks>If document provided is not present in the <see cref="P:AvalonDock.DockingManager.Documents"/> list, this method inserts it in first position of <see cref="!:MainDocumentPane.Items"/> collection.
            In both cases select it in the container <see cref="T:AvalonDock.DocumentPane"/>.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.Show(AvalonDock.DockableContent)">
            <summary>
            Show a dockable content in its container <see cref="T:AvalonDock.Pane"/>
            </summary>
            <param name="content">Content to show</param>
        </member>
        <member name="M:AvalonDock.DockingManager.Show(AvalonDock.DockableContent,AvalonDock.DockableContentState)">
            <summary>
            Show a dockable content in its container with a desidered state
            </summary>
            <param name="content">Content to show</param>
            <param name="desideredState">State desidered</param>
        </member>
        <member name="M:AvalonDock.DockingManager.Show(AvalonDock.DockableContent,AvalonDock.DockableContentState,AvalonDock.AnchorStyle)">
            <summary>
            Show a dockable content in its container with a desidered state
            </summary>
            <param name="content">Content to show</param>
            <param name="desideredState">State desidered</param>
            <param name="desideredAnchor">Border to which anchor the newly created container pane</param>
            <remarks></remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.UpdateAnchorStyle(AvalonDock.ResizingPanel)">
            <summary>
            Update the <see cref="P:AvalonDock.DockablePane.Anchor"/> property relative to the <see cref="T:AvalonDock.DocumentContent"/> object
            </summary>
            <param name="panel"></param>
            <returns></returns>
            <remarks>Traverse the logical tree starting from root <see cref="T:AvalonDock.ResizingPanel"/> and set property <see cref="P:AvalonDock.DockablePane.Anchor"/> of dockable pane found.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.ForceAnchorStyle(AvalonDock.ResizingPanel,AvalonDock.AnchorStyle)">
            <summary>
            Called by <see cref="M:AvalonDock.DockingManager.UpdateAnchorStyle"/> whene a <see cref="T:AvalonDock.DocumentContent"/> object has been found
            </summary>
            <param name="panel"></param>
            <param name="forcedAnchor"></param>
        </member>
        <member name="F:AvalonDock.DockingManager._flyoutWindow">
            <summary>
            Stores the only one flyout window that can be open at time
            </summary>
        </member>
        <member name="F:AvalonDock.DockingManager._wndInteropWrapper">
            <summary>
            This object is used to handle interop events (i.e. WindowsPosChanging) of the main window the contains this
            DockingManager object
            </summary>
            <remarks>WindowsPosChanging are useful to automatically resize the FlyoutWindow when user move
            the main window.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.HideFlyoutWindow">
            <summary>
            Closes the flyout window
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.ShowFlyoutWindow(AvalonDock.DockableContent,AvalonDock.DockablePaneAnchorTab)">
            <summary>
            Shows a flyout window for a content
            </summary>
            <param name="content">Content to show</param>
        </member>
        <member name="M:AvalonDock.DockingManager.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Handles the resize changed event to update location and size of the flyout window
            </summary>
            <param name="sizeInfo"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.OnFlyoutWindowClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handle the closing event of the flyout window to reset internal variables
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.UpdateFlyoutWindowPosition">
            <summary>
            Update location and size of the flyout window
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.UpdateFlyoutWindowPosition(System.Boolean)">
            <summary>
            Update location and size of the flyout window
            </summary>
            <param name="initialSetup">Indicates if thw current flyout window should be setup for the first time.</param>
        </member>
        <member name="M:AvalonDock.DockingManager.Drag(AvalonDock.FloatingWindow,System.Windows.Point,System.Windows.Point)">
            <summary>
            Begins dragging operations
            </summary>
            <param name="floatingWindow">Floating window containing pane which is dragged by user</param>
            <param name="point">Current mouse position</param>
            <param name="offset">Offset to be use to set floating window screen position</param>
            <returns>Retruns True is drag is completed, false otherwise</returns>
        </member>
        <member name="M:AvalonDock.DockingManager.CompleteDragging(System.Windows.Point)">
            <summary>
            Ends all previously initiated dragging operations
            </summary>
            <param name="ptEndDrag"></param>
        </member>
        <member name="F:AvalonDock.DockingManager._overlayWindow">
            <summary>
            Overlay window which shows docking placeholders
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.AvalonDock#IDropSurface#OnDragEnter(System.Windows.Point)">
            <summary>
            Handles this sourface mouse entering (show current overlay window)
            </summary>
            <param name="point">Current mouse position</param>
        </member>
        <member name="M:AvalonDock.DockingManager.AvalonDock#IDropSurface#OnDragOver(System.Windows.Point)">
            <summary>
            Handles mouse overing this surface
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.AvalonDock#IDropSurface#OnDragLeave(System.Windows.Point)">
            <summary>
            Handles mouse leave event during drag (hide overlay window)
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.AvalonDock#IDropSurface#OnDrop(System.Windows.Point)">
            <summary>
            Handler drop events
            </summary>
            <param name="point">Current mouse position</param>
            <returns>Returns alwasy false because this surface doesn't support direct drop</returns>
        </member>
        <member name="M:AvalonDock.DockingManager.SaveLayout(System.IO.TextWriter)">
            <summary>
            Save layout as xml to a <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="textWriter">Text writter object which receive the xml text</param>
            <remarks>The writer is not closed.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.SaveLayout(System.IO.Stream)">
            <summary>
            Save layout as xml to generic stream
            </summary>
            <param name="backendStream">Stream receiving the xml string</param>
            <remarks>The stream is not closed</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.SaveLayout(System.String)">
            <summary>
            Save layout as xml text into a file
            </summary>
            <param name="filename">Path to the file</param>
            <remarks>The file is created as new or overwritten is already exist a file with same name.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.SaveLayout(System.Xml.XmlWriter)">
            <summary>
            Send layout configuration to a <see cref="T:System.Xml.XmlTextWriter"/> object
            </summary>
            <param name="sw">Object which stores the xml</param>
            <remarks>The writer is not closed.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.RestoreLayout(System.IO.Stream)">
            <summary>
            Restore a <see cref="T:AvalonDock.DockingManager"/> layout from xml
            </summary>
            <param name="backendStream"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.RestoreLayout(System.Xml.XmlReader)">
            <summary>
            Restore a <see cref="T:AvalonDock.DockingManager"/> layout from xml
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.RestoreLayout(System.String)">
            <summary>
            Loads a xml content from a file and restore the <see cref="T:AvalonDock.DockingManager"/> layout contained in it
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.RestoreLayout(System.IO.TextReader)">
            <summary>
            Restore a <see cref="T:AvalonDock.DockingManager"/> layout from a xml string
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.RestoreLayout(System.Xml.XmlElement,AvalonDock.DockableContent[],AvalonDock.DocumentContent[],AvalonDock.DocumentPane@)">
            <summary>
            Restore from xml a resizing panel or a documentpane
            </summary>
            <param name="mainElement"></param>
            <param name="actualContents"></param>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.DockingManager.RestoreLayout(System.Xml.XmlDocument)">
            <summary>
            Internal main restore layout method
            </summary>
            <param name="doc">Document Xml from which restore layout</param>
        </member>
        <member name="F:AvalonDock.DockingManager.GLConverter">
            <summary>
            Static converter used to convert GridLength from/to string
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.OnDocumentClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Ovveride this method to handle <see cref="E:AvalonDock.DockingManager.DocumentClosing"/> event.
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.OnDocumentClosed">
            <summary>
            Ovveride this method to handle <see cref="E:AvalonDock.DockingManager.DocumentClosed"/> event.
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.ActiveDocument">
            <summary>
            Gets or sets the ActiveDocument property.  This dependency property 
            indicates currently active document.
            </summary>
            <remarks>The active document not neessary receive keyboard focus. To set keyboard focus on a content see <see cref="P:AvalonDock.DockingManager.ActiveContent"/></remarks>
        </member>
        <member name="E:AvalonDock.DockingManager.ActiveDocumentChanged">
            <summary>
            Raised whenever the <see cref="P:AvalonDock.DockingManager.ActiveDocument"/> property changes
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.ActiveContent">
            <summary>
            Gets or sets the ActiveContent property.  This dependency property 
            indicates the active content.
            </summary>
        </member>
        <member name="E:AvalonDock.DockingManager.ActiveContentChanged">
            <summary>
            Raised whenever the <see cref="P:AvalonDock.DockingManager.ActiveContent"/> changes
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.ActiveDockableContent">
            <summary>
            Gets the active dockable content
            </summary>
            <remarks>If no dockbale content us active at the moment returns null.</remarks>
        </member>
        <member name="P:AvalonDock.DockingManager.DockableContents">
            <summary>
            Gets the DockableContents property.  This dependency property 
            retrives the collection of <see cref="T:AvalonDock.DockableContent"/> that are bound to <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.Documents">
            <summary>
            Gets the DockableContents property.  This dependency property 
            retrives the collection of <see cref="T:AvalonDock.DocumentContent"/> that are bound to <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.DocumentsSource">
            <summary>
            Get or set the source collection for documents
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.MainDocumentPane">
            <summary>
            Gets the main <see cref="T:AvalonDock.DocumentPane"/> that can be used to add new document
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.FloatingWindows">
            <summary>
            Get all floating windows created by the <see cref="T:AvalonDock.DockingManager"/> while user dragged contents
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.IsAnimationEnabled">
            <summary>
            Gets or sets a value indicating if flyout windows should animate when are open or closed
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.AvalonDock#IDropSurface#SurfaceRectangle">
            <summary>
            Returns a rectangle where this surface is active
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.OverlayWindow">
            <summary>
            Returns current overlay window
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.RestoringLayout">
            <summary>
            True while is restoring a layout
            </summary>
        </member>
        <member name="E:AvalonDock.DockingManager.DocumentClosing">
            <summary>
            Event fired when the document is about to be closed
            </summary>
        </member>
        <member name="E:AvalonDock.DockingManager.DocumentClosed">
            <summary>
            Event fired when a document has been closed
            </summary>
            <remarks>Note that when a document is closed, property like <see cref="P:AvalonDock.ManagedContent.ContainerPane"/> or <see cref="P:AvalonDock.ManagedContent.Manager"/> returns null.</remarks>
        </member>
        <member name="T:AvalonDock.ILinqToTree`1">
            <summary>
            Defines an adapter that must be implemented in order to use the LinqToTree
            extension methods
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AvalonDock.ILinqToTree`1.Children">
            <summary>
            Obtains all the children of the Item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AvalonDock.ILinqToTree`1.Parent">
            <summary>
            The parent of the Item.
            </summary>
        </member>
        <member name="P:AvalonDock.ILinqToTree`1.Item">
            <summary>
            The item being adapted.
            </summary>
        </member>
        <member name="M:AvalonDock.ILinqToTreeExts.Descendants``1(AvalonDock.ILinqToTree{``0})">
            <summary>
            Returns a collection of descendant elements.
            </summary>
        </member>
        <member name="M:AvalonDock.ILinqToTreeExts.Ancestors``1(AvalonDock.ILinqToTree{``0})">
            <summary>
            Returns a collection of ancestor elements.
            </summary>
        </member>
        <member name="M:AvalonDock.ILinqToTreeExts.Elements``1(AvalonDock.ILinqToTree{``0})">
            <summary>
            Returns a collection of child elements.
            </summary>
        </member>
        <member name="T:AvalonDock.VisualTreeAdapter">
            <summary>
            An adapter for DependencyObject which implements ILinqToTree in
            order to allow Linq queries on the visual tree
            </summary>
        </member>
        <member name="T:AvalonDock.LogicalTreeAdapter">
            <summary>
            An adapter for DependencyObject which implements ILinqToTree in
            order to allow Linq queries on the logical tree
            </summary>
        </member>
        <member name="F:AvalonDock.DockableFloatingWindow.IsDockableWindowProperty">
            <summary>
            IsDockableWindow Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DockableFloatingWindow.OnIsDockableWindowChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the IsDockableWindow property.
            </summary>
        </member>
        <member name="M:AvalonDock.DockableFloatingWindow.OnIsDockableWindowChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides derived classes an opportunity to handle changes to the IsDockableWindow property.
            </summary>
        </member>
        <member name="P:AvalonDock.DockableFloatingWindow.IsDockableWindow">
            <summary>
            Gets or sets the IsDockableWindow property.  This dependency property 
            indicates that <see cref="T:AvalonDock.FloatingWindow"/> can be docked to <see cref="T:AvalonDock.DockingManager"/>.
            </summary>
        </member>
        <member name="T:AvalonDock.AnchorStyle">
            <summary>
            Anchor types
            </summary>
        </member>
        <member name="F:AvalonDock.AnchorStyle.None">
            <summary>
            No anchor style, while content is hosted in a <see cref="T:AvalonDock.DocumentPane"/> or a <see cref="T:AvalonDock.FloatingWindow"/>
            </summary>
        </member>
        <member name="F:AvalonDock.AnchorStyle.Top">
            <summary>
            Top border anchor
            </summary>
        </member>
        <member name="F:AvalonDock.AnchorStyle.Left">
            <summary>
            Left border anchor
            </summary>
        </member>
        <member name="F:AvalonDock.AnchorStyle.Bottom">
            <summary>
            Bottom border anchor
            </summary>
        </member>
        <member name="F:AvalonDock.AnchorStyle.Right">
            <summary>
            Right border anchor
            </summary>
        </member>
        <member name="T:AvalonDock.DragPaneServices">
            <summary>
            Provides drag-drop functionalities for dockable panes
            </summary>
        </member>
        <member name="T:AvalonDock.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DockableContentCommands_DockableFloatingWindow">
            <summary>
              Looks up a localized string similar to Float.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DockableContentCommands_FloatingWindow">
            <summary>
              Looks up a localized string similar to Float.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DockableContentCommands_ShowAsDocument">
            <summary>
              Looks up a localized string similar to Dock as Tabbed Document.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DockableContentCommands_ToggleAutoHide">
            <summary>
              Looks up a localized string similar to Auto Hide.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DockablePane_ShowOptionsMenu">
            <summary>
              Looks up a localized string similar to Window Position.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DockablePaneCommands_Close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DockablePaneCommands_Hide">
            <summary>
              Looks up a localized string similar to Hide.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DockablePaneCommands_ToggleAutoHide">
            <summary>
              Looks up a localized string similar to Auto Hide.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DocumentContentCommands_FloatingDocument">
            <summary>
              Looks up a localized string similar to Float.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DocumentContentCommands_TabbedDocument">
            <summary>
              Looks up a localized string similar to Dock as Tabbed Document.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DocumentPaneCommands_CloseAllButThis">
            <summary>
              Looks up a localized string similar to Close All But This.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DocumentPaneCommands_CloseThis">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DocumentPaneCommands_NewHorizontalTabGroup">
            <summary>
              Looks up a localized string similar to New Horizontal Tab Group.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.DocumentPaneCommands_NewVerticalTabGroup">
            <summary>
              Looks up a localized string similar to New VerticalTab Group.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.ManagedContentCommands_Activate">
            <summary>
              Looks up a localized string similar to Activate.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.ManagedContentCommands_Close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.ManagedContentCommands_Hide">
            <summary>
              Looks up a localized string similar to Hide.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.ManagedContentCommands_Show">
            <summary>
              Looks up a localized string similar to Show.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.NavigatorWindow_ActiveFiles">
            <summary>
              Looks up a localized string similar to Active Files.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.NavigatorWindow_ActiveToolWindows">
            <summary>
              Looks up a localized string similar to Active Tool Windows.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.PaneCommands_Dock">
            <summary>
              Looks up a localized string similar to Dock.
            </summary>
        </member>
        <member name="T:AvalonDock.ManagedContentCommands">
            <summary>
            Defines commands shared beteween all contents (Dockable or Documents)
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContentCommands.Close">
            <summary>
            This command closes the content
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContentCommands.Hide">
            <summary>
            This command hides the content
            </summary>
        </member>
        <member name="P:AvalonDock.ManagedContentCommands.Show">
            <summary>
            This command shows the content
            </summary>
            <remarks>How content is shown by default depends from the type of content. A <see cref="T:AvalonDock.DockableContent"/> is shown as docked pane, instead
            a <see cref="T:AvalonDock.DocumentContent"/> is shown as tabbed document</remarks>
        </member>
        <member name="P:AvalonDock.ManagedContentCommands.Activate">
            <summary>
            This command activate the commands (i.e. select it inside the conatiner pane)
            </summary>
            <remarks>Activating a content means essentially putting it in evidence. For a content that is auto-hidden this command opens a flyout window containing the content.</remarks>
        </member>
        <member name="T:AvalonDock.FlyoutPaneWindow">
            <summary>
            Implements a flyout window
            </summary>
            <remarks>
            The flyout window is showed when user activate a ManagedContent that is in the AutoHide state.
            The flyout window appears from a border of the parent docking manager according to the property Anchor.
            It contains the selected content under the property ReferencedPane.
            When user move focus to an other object outside this window, it automaticcaly is closed.
            </remarks>
        </member>
        <member name="F:AvalonDock.FlyoutPaneWindow._winFormsHost">
            <summary>
            Points to the internal windows forms control (if exist)
            </summary>
        </member>
        <member name="M:AvalonDock.FlyoutPaneWindow.OnClosed(System.EventArgs)">
            <summary>
            Handles the closed event
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:AvalonDock.FlyoutPaneWindow._refPane">
            <summary>
            Refrenced pane
            </summary>
        </member>
        <member name="M:AvalonDock.FlyoutPaneWindow.OnInitialized(System.EventArgs)">
            <summary>
            Initialize the window
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:AvalonDock.FlyoutPaneWindow._resizerPopup">
            <summary>
            Popup window that hosts the resizer thumb
            </summary>
            <remarks>Resizer is host in a popup window becaus it needs to overlay winforms controls.</remarks>
        </member>
        <member name="M:AvalonDock.FlyoutPaneWindow.InitClosingTimer">
            <summary>
            Creates the closing timer
            </summary>
        </member>
        <member name="M:AvalonDock.FlyoutPaneWindow.StopClosingTimer">
            <summary>
            Stop the closing timer
            </summary>
        </member>
        <member name="M:AvalonDock.FlyoutPaneWindow.ForceCloseWindow(System.Object,System.EventArgs)">
            <summary>
            This handler is called when the closing time delay is elapsed (user is focusing to something else of the UI)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AvalonDock.FlyoutPaneWindow.CloseWidthAnimation">
            <summary>
            Initiate a closing animation
            </summary>
        </member>
        <member name="M:AvalonDock.FlyoutPaneWindow.OpenWidthAnimation">
            <summary>
            Initiate an opening animation
            </summary>
        </member>
        <member name="M:AvalonDock.FlyoutPaneWindow.OpenPane">
            <summary>
            Open the flyout window with or without animation depending on the ShowAnimated flag
            </summary>
        </member>
        <member name="M:AvalonDock.FlyoutPaneWindow.ClosePane">
            <summary>
            Close the flyout window with or without animation depending on the ShowAnimated flag
            </summary>
        </member>
        <member name="P:AvalonDock.FlyoutPaneWindow.TargetWidth">
            <summary>
            Gets or sets the final width of the window
            </summary>
        </member>
        <member name="P:AvalonDock.FlyoutPaneWindow.TargetHeight">
            <summary>
            Gets or sets the final height of the window
            </summary>
        </member>
        <member name="P:AvalonDock.FlyoutPaneWindow.IsClosed">
            <summary>
            Gets a value indicating i fthis window is closed
            </summary>
        </member>
        <member name="P:AvalonDock.FlyoutPaneWindow.Anchor">
            <summary>
            Anchor of the flyout window
            </summary>
        </member>
        <member name="P:AvalonDock.FlyoutPaneWindow.CorrectedAnchor">
            <summary>
            Get th anchor of the window corrected with the FlowDirection property
            </summary>
        </member>
        <member name="P:AvalonDock.FlyoutPaneWindow.ReferencedPane">
            <summary>
            Gets the pane that is hosted in flyout window
            </summary>
        </member>
        <member name="P:AvalonDock.FlyoutPaneWindow.IsResizing">
            <summary>
            Gets a value indicating if user is resizer the window
            </summary>
        </member>
        <member name="P:AvalonDock.FlyoutPaneWindow.IsClosing">
            <summary>
            Gets a value indicating if the flyout window is closing
            </summary>
        </member>
        <member name="P:AvalonDock.FlyoutPaneWindow.IsOpening">
            <summary>
            Gets a flag indicating if flyout window is opening
            </summary>
        </member>
        <member name="T:AvalonDock.BoolToVisibilityConverter">
            <summary>
            Converter from boolean values to visibility (inverse mode)
            </summary>
        </member>
        <member name="T:AvalonDock.DockablePaneCommands">
            <summary>
            Defines commands that can be applied to a dockable pane
            </summary>
        </member>
        <member name="P:AvalonDock.DockablePaneCommands.Close">
            <summary>
            This command closes the <see cref="T:AvalonDock.DockablePane"/> and closes all the contained <see cref="T:AvalonDock.DockableContent"/>s inside it
            </summary>
        </member>
        <member name="P:AvalonDock.DockablePaneCommands.Hide">
            <summary>
            This command closes the <see cref="T:AvalonDock.DockablePane"/> and hides all the contained <see cref="T:AvalonDock.DockableContent"/>s inside it
            </summary>
        </member>
        <member name="P:AvalonDock.DockablePaneCommands.ToggleAutoHide">
            <summary>
            This commands auto-hides the pane with all contained <see cref="T:AvalonDock.DockableContent"/>s inside it
            </summary>
        </member>
        <member name="T:AvalonDock.ContextMenuElement">
            <summary>
            Defines a list of context menu resources
            </summary>
        </member>
        <member name="F:AvalonDock.ContextMenuElement.DockablePane">
            <summary>
            Context menu related to a <see cref="F:AvalonDock.ContextMenuElement.DockablePane"/>
            </summary>
        </member>
        <member name="F:AvalonDock.ContextMenuElement.DocumentPane">
            <summary>
            Context menu related to a <see cref="F:AvalonDock.ContextMenuElement.DocumentPane"/>
            </summary>
        </member>
        <member name="F:AvalonDock.ContextMenuElement.DockableFloatingWindow">
            <summary>
            Context menu related to a <see cref="F:AvalonDock.ContextMenuElement.DockableFloatingWindow"/>
            </summary>
        </member>
        <member name="F:AvalonDock.ContextMenuElement.DocumentFloatingWindow">
            <summary>
            Context menu related to a <see cref="F:AvalonDock.ContextMenuElement.DocumentFloatingWindow"/>
            </summary>
        </member>
        <member name="P:AvalonDock.PaneCommands.Dock">
            <summary>
            Dock <see cref="T:AvalonDock.Pane"/> to container <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="T:AvalonDock.DockableContentCommands">
            <summary>
            Defines commands that can be executed against a DockableContent
            </summary>
        </member>
        <member name="P:AvalonDock.DockableContentCommands.ShowAsDocument">
            <summary>
            Shows the DockableContent as a tabbed document
            </summary>
        </member>
        <member name="P:AvalonDock.DockableContentCommands.FloatingWindow">
            <summary>
            Shows the <see cref="T:AvalonDock.DockableContent"/> as a <see cref="P:AvalonDock.DockableContentCommands.FloatingWindow"/> which overlays the <see cref="T:AvalonDock.DockingManager"/>
            </summary>
            <remarks>A floating window can't be redocked to the docking manager.</remarks>
        </member>
        <member name="P:AvalonDock.DockableContentCommands.DockableFloatingWindow">
            <summary>
            Shows the <see cref="T:AvalonDock.DockableContent"/> as a <see cref="P:AvalonDock.DockableContentCommands.DockableFloatingWindow"/> which overlays the <see cref="T:AvalonDock.DockingManager"/>
            </summary>
            <remarks>A floating window can't be redocked to the docking manager.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:AvalonDock.DockableContentCommands.ToggleAutoHide" -->
        <member name="T:AvalonDock.DockableContentState">
            <summary>
            Enumerates all the possible states of <see cref="T:AvalonDock.DockableContent"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.None">
            <summary>
            Content is not associated with any <see cref="T:AvalonDock.DockingManager"/> (Default State)
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.Docked">
            <summary>
            Content is docked to a border of a <see cref="T:AvalonDock.ResizingPanel"/> within as <see cref="T:AvalonDock.DockingManager"/> control
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.AutoHide">
            <summary>
            Content is hosted by a flyout window and is visible only when user move mouse over an anchor thumb located to a <see cref="T:AvalonDock.DockingManager"/> controlo border
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.DockableWindow">
            <summary>
            Content is hosted by a floating window and user can redock is on its <see cref="T:AvalonDock.DockingManager"/> container control
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.FloatingWindow">
            <summary>
            Content is hosted by a floating window that can't be docked to a its <see cref="T:AvalonDock.DockingManager"/> container control
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.Document">
            <summary>
            Content is hosted into a <see cref="!:DocmumentPane"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.Hidden">
            <summary>
            Content is hidden
            </summary>
        </member>
        <member name="T:AvalonDock.DockableStyle">
            <summary>
            Defines how a dockable content can be dragged over a docking manager
            </summary>
            <remarks>This style can be composed with the 'or' operator.</remarks>
        </member>
        <member name="F:AvalonDock.DockableStyle.None">
            <summary>
            Content is not dockable at all
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.Document">
            <summary>
            Dockable as document
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.LeftBorder">
            <summary>
            Dockable to the left border of <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.RightBorder">
            <summary>
            Dockable to the right border of <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.TopBorder">
            <summary>
            Dockable to the top border of <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.BottomBorder">
            <summary>
            Dockable to the bottom border of <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.Floating">
            <summary>
            A <see cref="T:AvalonDock.DockableContent"/> with this style can be hosted in a <see cref="T:AvalonDock.FloatingWindow"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.Single">
            <summary>
            A <see cref="T:AvalonDock.DockableContent"/> with this style can be the only one content in a <see cref="T:AvalonDock.DockablePane"/> pane (NOT YET SUPPORTED)
            </summary>
            <remarks>This style is not compatible with <see cref="F:AvalonDock.DockableStyle.Document"/> style</remarks>
        </member>
        <member name="F:AvalonDock.DockableStyle.AutoHide">
            <summary>
            A <see cref="!:DockableContet"/> with this style can be autohidden.
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.DockableToBorders">
            <summary>
            Dockable only to a border of a <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.Dockable">
            <summary>
            Dockable to a border of a <see cref="T:AvalonDock.DockingManager"/> and into a <see cref="T:AvalonDock.DocumentPane"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.DockableButNotAutoHidden">
            <summary>
            Dockable to a border of a <see cref="T:AvalonDock.DockingManager"/> and into a <see cref="T:AvalonDock.DocumentPane"/> but not in autohidden mode (WinForms controls)
            </summary>
        </member>
        <member name="T:AvalonDock.DockableContentStateAndPosition">
            <summary>
            Represent a state of a dockable content that can be used to restore it after it's hidden
            </summary>
        </member>
        <member name="T:AvalonDock.DockableContent">
            <summary>
            Identifies a content that can be drag over a <see cref="T:AvalonDock.DockingManager"/> control or hosted by a window floating over it (<see cref="T:AvalonDock.FloatingWindow"/>).
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContent.StateChangedEvent">
            <summary>
            StateChanged Routed Event
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.RaiseStateChangedEvent">
            <summary>
            A helper method to raise the StateChanged event.
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.RaiseStateChangedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the StateChanged event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:AvalonDock.DockableContent.DockableStyleProperty">
            <summary>
            DockableStyle Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.Show">
            <summary>
            Show <see cref="T:AvalonDock.DockableContent"/> as docked pane
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.Show(AvalonDock.DockingManager)">
            <summary>
            Show <see cref="T:AvalonDock.DockableContent"/> as docked pane within provided <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.Show(AvalonDock.AnchorStyle)">
            <summary>
            Show <see cref="T:AvalonDock.DockableContent"/> as docked pane
            </summary>
            <param name="desideredAnchor">Desidered anchor position</param>
        </member>
        <member name="M:AvalonDock.DockableContent.Show(AvalonDock.DockingManager,AvalonDock.AnchorStyle)">
            <summary>
            Show <see cref="T:AvalonDock.DockableContent"/> as docked pane
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.ShowAsDocument">
            <summary>
            Show as <see cref="T:AvalonDock.DockableContent"/> as a tabbed document
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.ShowAsDocument(AvalonDock.DockingManager)">
            <summary>
            Show as <see cref="T:AvalonDock.DockableContent"/> as a tabbed document under the provided <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.ShowAsFloatingWindow(System.Boolean)">
            <summary>
            Show the content as floating window inside the provided <see cref="T:AvalonDock.DockingManager"/>
            </summary>
            <param name="dockableWindow">True if the resulting floating window can the be re-docked to the docking manager.</param>
        </member>
        <member name="M:AvalonDock.DockableContent.ShowAsFloatingWindow(AvalonDock.DockingManager,System.Boolean)">
            <summary>
            Show the content ad floating window
            </summary>
            <param name="dockableWindow">True if the resulting floating window can the be re-docked to the docking manager.</param>
        </member>
        <member name="M:AvalonDock.DockableContent.Hide">
            <summary>
            Hides this content
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.Close">
            <summary>
            Close content
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.Close(System.Boolean)">
            <summary>
            Close content
            </summary>
            <param name="forceClose">If true forces the content closing regardless of the <see cref="P:AvalonDock.DockableContent.HideOnClose"/> property.</param>
        </member>
        <member name="M:AvalonDock.DockableContent.CloseOrHide">
            <summary>
            Closes or hides provided content depending on HideOnClose property
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.CloseOrHide(System.Boolean)">
            <summary>
            Closes or hides content depending on HideOnClose property
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.ToggleAutoHide">
            <summary>
            Slides out this content to a border of the containing docking manager
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.CanExecuteCommand(System.Windows.Input.ICommand)">
            <summary>
            Retrive a value indicating if the command can be executed based to the dockable content state
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.DockableContent.ResetSavedStateAndPosition">
            <summary>
            Reset internal state and position of the content
            </summary>
            <remarks>After a <see cref="T:AvalonDock.DockableContent"/> is hidden AvalonDock save its state and position in order to
            restore it correctly when user wants to reshow it calling <see cref="M:AvalonDock.DockingManager.Show(AvalonDock.DocumentContent)"/> function. Call this method
            if you want to reset these data and provide your state and anchor style calling one of the overloads of the function
            <see cref="M:AvalonDock.DockingManager.Show(AvalonDock.DocumentContent)"/>.</remarks>
        </member>
        <member name="M:AvalonDock.DockableContent.SaveLayout(System.Xml.XmlWriter)">
            <summary>
            Save content specific layout settings
            </summary>
            <param name="storeWriter">Backend store writer</param>
            <remarks>Custom derived class can overloads this method to handle custom layout persistence.</remarks>
        </member>
        <member name="M:AvalonDock.DockableContent.RestoreLayout(System.Xml.XmlElement)">
            <summary>
            Restore content specific layout settings
            </summary>
            <param name="storeReader">Saved xml element containg content layout settings</param>
            <remarks>Custom derived class must overload this method to restore custom layout settings previously saved trought <see cref="M:AvalonDock.DockableContent.SaveLayout(System.Xml.XmlWriter)"/>.</remarks>
        </member>
        <member name="F:AvalonDock.DockableContent.FlyoutWindowSizeProperty">
            <summary>
            FlyoutWindowSize Dependency Property
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.OnFlyoutWindowSizeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the FlyoutWindowSize property.
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.CoerceFlyoutWindowSizeValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the FlyoutWindowSize value.
            </summary>
        </member>
        <member name="P:AvalonDock.DockableContent.FloatingWindowSizeToContent">
            <summary>
            Gets or sets a value indicating if this dockable content should change the size of a FloatingWindow when undocked
            </summary>
        </member>
        <member name="E:AvalonDock.DockableContent.StateChanged">
            <summary>
            Occurs when State property changes
            </summary>
        </member>
        <member name="P:AvalonDock.DockableContent.State">
            <summary>
            Gets the state of <see cref="T:AvalonDock.DockableContent"/>
            </summary>
        </member>
        <member name="P:AvalonDock.DockableContent.DockableStyle">
            <summary>
            Get or sets a value that indicates how a dockable content can be dragged over and docked to a <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="P:AvalonDock.DockableContent.FlyoutWindowSize">
            <summary>
            Gets or sets the FlyoutWindowSize property.  This dependency property 
            indicates size of the window hosting this content when is in auto-hidden state.
            This property is persisted when layout of the container <see cref="T:AvalonDock.DockingManager"/> is saved.
            </summary>
        </member>
        <member name="T:AvalonDock.GreyableImage">
            <summary>
            Image control that get's greyed out when disabled.
            This control is intended to be used for toolbar, menu or button icons where ability of an icon to 
            grey itself out when disabled is essential.
            <remarks>
            1) Greyscale image is created using FormatConvertedBitmap class. Unfortunately when converting the
               image to greyscale this class does n0t preserve transparency information. To overcome that, there is 
               an opacity mask created from original image that is applied to greyscale image in order to preserve
               transparency information. Because of that if an OpacityMask is applied to original image that mask 
               has to be combined with that special opacity mask of greyscale image in order to make a proper 
               greyscale image look. If you know how to combine two opacity masks please let me know.
            2) DrawingImage source is not supported at the moment.
            3) Have not tried to use any BitmapSource derived sources accept for BitmapImage so it may not be 
               able to convert some of them to greyscale.
            4) When specifying source Uri from XAML try to use Absolute Uri otherwise the greyscale image
               may not be created in some scenarious. There is some code to improve the situation but I cannot 
               guarantee it will work in all possible scenarious.
            5) In case the greyscaled version cannot be created for whatever reason the original image with 
               60% opacity (i.e. dull colours) will be used instead (that will work even with the DrawingImage 
               source).
            </remarks>
            </summary>
        </member>
        <member name="M:AvalonDock.GreyableImage.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Overwritten to handle changes of IsEnabled, Source and OpacityMask properties
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AvalonDock.GreyableImage.SetSources">
            <summary>
            Cashes original ImageSource, creates and caches greyscale ImageSource and greyscale opacity mask
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContentCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Override collection changed event to setup manager property on <see cref="T:AvalonDock.ManagedContent"/> objects
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AvalonDock.ManagedContentCollection`1.Add(`0)">
            <summary>
            Add a content to the list
            </summary>
            <param name="contentToAdd"></param>
        </member>
        <member name="P:AvalonDock.ManagedContentCollection`1.Manager">
            <summary>
            Get associated <see cref="T:AvalonDock.DockingManager"/> object
            </summary>
        </member>
        <member name="T:AvalonDock.DockableFloatingWindowCommands">
            <summary>
            Encapsulates the 
            </summary>
        </member>
        <member name="P:AvalonDock.RequestDocumentCloseEventArgs.DocumentToClose">
            <summary>
            Document content that user wants to close
            </summary>
        </member>
        <member name="T:AvalonDock.DocumentContentCommands">
            <summary>
            Contains a list of commands that can be applied to a <see cref="T:AvalonDock.DocumentContent"/>
            </summary>
        </member>
        <member name="P:AvalonDock.DocumentContentCommands.FloatingDocument">
            <summary>
            Shows the <see cref="T:AvalonDock.DocumentContent"/> as a floating window document 
            </summary>
        </member>
        <member name="P:AvalonDock.DocumentContentCommands.TabbedDocument">
            <summary>
            Shows the <see cref="T:AvalonDock.DocumentContent"/> as a tabbed document 
            </summary>
        </member>
    </members>
</doc>
